/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package process.scheduling.simulator.view;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import process.scheduling.simulator.ProcessObj;
import process.scheduling.simulator.fcfs.FirstComeFirstServe;
import process.scheduling.simulator.roundRobin.RoundRobin;
import process.scheduling.simulator.sjf.ShortestJobFirst;
import process.scheduling.simulator.srtf.ShortestRemainingTime;

/**
 *
 * @author Mahesh
 */
public class Starter extends javax.swing.JFrame {

    /**
     * Creates new form Starter
     */
    public Starter() {
        initComponents();
        DefaultTableModel mdl = (DefaultTableModel) tblAddedProcess.getModel();
            mdl.setRowCount(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        pIdTxt = new javax.swing.JTextField();
        pNameTxt = new javax.swing.JTextField();
        pATimeTxt = new javax.swing.JTextField();
        pBTimeTxt = new javax.swing.JTextField();
        createProcess = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        sJF = new javax.swing.JButton();
        rRound = new javax.swing.JButton();
        fCFS = new javax.swing.JButton();
        sRT = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAddedProcess = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        btnClearTbl = new javax.swing.JButton();
        tQuantumtxt = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblComplete = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        lblAvgTTime = new javax.swing.JLabel();
        lblAvgWtime = new javax.swing.JLabel();
        lblthroughput = new javax.swing.JLabel();
        txtAvgTurn = new javax.swing.JTextField();
        txtWait = new javax.swing.JTextField();
        txtThroughput = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CPU Scheduling Algorithms Simulator");

        jLabel1.setFont(new java.awt.Font("Palatino Linotype", 1, 14)); // NOI18N
        jLabel1.setText("CPU Scheduling Algorithm Simulator");

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Create process");

        jLabel3.setText("Process Id");

        jLabel4.setText("Process Name");

        jLabel5.setText("Arrival Time");

        jLabel6.setText("Burst Time");

        pIdTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pIdTxtActionPerformed(evt);
            }
        });

        pNameTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pNameTxtActionPerformed(evt);
            }
        });

        pBTimeTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pBTimeTxtActionPerformed(evt);
            }
        });

        createProcess.setText("Create process");
        createProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createProcessActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(44, 44, 44)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(pIdTxt)
                            .addComponent(pNameTxt)
                            .addComponent(pATimeTxt)
                            .addComponent(pBTimeTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addComponent(jLabel2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(createProcess)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(pIdTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(pNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(pATimeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(pBTimeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(createProcess)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        sJF.setText("Shortest job first");
        sJF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sJFActionPerformed(evt);
            }
        });

        rRound.setText("Round robin");
        rRound.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rRoundActionPerformed(evt);
            }
        });

        fCFS.setText("First come first serve");
        fCFS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fCFSActionPerformed(evt);
            }
        });

        sRT.setText("Shortest remaining time");
        sRT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sRTActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sJF, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rRound, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(fCFS, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sRT, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {fCFS, rRound, sJF, sRT});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sJF, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(rRound)
                        .addComponent(fCFS, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(sRT, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {fCFS, rRound, sJF, sRT});

        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        tblAddedProcess.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Process Id", "Name", "Arrival time", "Burst time"
            }
        ));
        jScrollPane1.setViewportView(tblAddedProcess);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setText("processes");

        btnClearTbl.setText("Clear ");
        btnClearTbl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearTblActionPerformed(evt);
            }
        });

        tQuantumtxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tQuantumtxtActionPerformed(evt);
            }
        });

        jLabel11.setText("Time Quantum :");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(170, 170, 170)
                .addComponent(jLabel7)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel11)
                .addGap(18, 18, 18)
                .addComponent(tQuantumtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(83, 83, 83)
                .addComponent(btnClearTbl, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnClearTbl)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tQuantumtxt)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        tblComplete.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Process Id", "Name", "Arrival Time", "Brust Time", "Completed Time", "Waiting Time", "Turnaround Time"
            }
        ));
        jScrollPane2.setViewportView(tblComplete);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel8.setText("Average Turnaround Time    :");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel9.setText("Average Waiting Time          :");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel10.setText("Throughput                        :");

        lblAvgTTime.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        lblAvgWtime.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        lblthroughput.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        txtAvgTurn.setEditable(false);
        txtAvgTurn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAvgTurnActionPerformed(evt);
            }
        });

        txtWait.setEditable(false);
        txtWait.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtWaitActionPerformed(evt);
            }
        });

        txtThroughput.setEditable(false);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtWait, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE)
                    .addComponent(txtThroughput)
                    .addComponent(txtAvgTurn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblAvgTTime)
                    .addComponent(lblAvgWtime)
                    .addComponent(lblthroughput))
                .addGap(406, 406, 406))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(lblAvgTTime, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblAvgWtime)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblthroughput))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtAvgTurn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(txtWait, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(txtThroughput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(143, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(217, 217, 217)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pIdTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pIdTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pIdTxtActionPerformed

    private void pNameTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pNameTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pNameTxtActionPerformed

    private void pBTimeTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pBTimeTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pBTimeTxtActionPerformed

    private void sJFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sJFActionPerformed
        List<ProcessObj> list = new ArrayList<>();
        List<ProcessObj> listCompleted = new ArrayList<>();
//        int timeQ = Integer.parseInt(this.tQuantumtxt.getText());
        DefaultTableModel mdl = (DefaultTableModel) tblAddedProcess.getModel();
        for (int i = 0; i < mdl.getRowCount(); i++) {
            int pId = (int) mdl.getValueAt(i, 0);
            String pName = (String) mdl.getValueAt(i, 1);
            int aTime = (int) mdl.getValueAt(i, 2);
            int bTime = (int) mdl.getValueAt(i, 3);
            ProcessObj p1 = new ProcessObj(pName,pId,aTime,bTime);
            list.add(p1);
//            System.out.println(p1.getId()+" "+p1.getName()+" "+p1.getArrivalTime()+" "+p1.getBrustTime());
        }
//        mdl.setRowCount(0);
         ShortestJobFirst sjf = new ShortestJobFirst();
        try {
            listCompleted=sjf.allocateResources(list);
            
        } catch (Exception e) {
            System.out.println("Fail to complete the task=>");
        }
        DefaultTableModel mdlComplete = (DefaultTableModel) tblComplete.getModel();
        mdlComplete.setRowCount(0);
        int totWaitingTime=0;
        int totTurnTime = 0;
        float avgWait,avgTurn;
        
        for (int i = 0; i < listCompleted.size(); i++) {
            ProcessObj p1 = listCompleted.get(i);
            mdlComplete.addRow(new Object[]{p1.getId(),p1.getName(),p1.getArrivalTime(),p1.getBrustTime(),p1.getCompleteTime(),p1.getWaitingTime(),p1.getTurnaroundTime()});
            totWaitingTime = totWaitingTime + p1.getWaitingTime();
            totTurnTime = totTurnTime + p1.getTurnaroundTime();
        }
        avgWait=(float)totWaitingTime/listCompleted.size();
        float avgWaitRound = (float) (Math.round(avgWait * 100.0) / 100.0);
        
        avgTurn=(float)totTurnTime/listCompleted.size();
        float avgTurnRound = (float) (Math.round(avgTurn * 100.0) / 100.0);
        
        txtAvgTurn.setText(String.valueOf(avgTurnRound));
        txtWait.setText(String.valueOf(avgWaitRound));
        txtThroughput.setText(calculateThroughput(listCompleted));
    }//GEN-LAST:event_sJFActionPerformed

    private void fCFSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fCFSActionPerformed
        List<ProcessObj> list = new ArrayList<>();
        List<ProcessObj> listCompleted = new ArrayList<>();
        DefaultTableModel mdl = (DefaultTableModel) tblAddedProcess.getModel();
        for (int i = 0; i < mdl.getRowCount(); i++) {
            int pId = (int) mdl.getValueAt(i, 0);
            String pName = (String) mdl.getValueAt(i, 1);
            int aTime = (int) mdl.getValueAt(i, 2);
            int bTime = (int) mdl.getValueAt(i, 3);
            ProcessObj p1 = new ProcessObj(pName,pId,aTime,bTime);
            list.add(p1);
        }
        FirstComeFirstServe f1 = new FirstComeFirstServe();
        try {
            listCompleted=f1.allocateResources(list);
            
        } catch (Exception e) {
            System.out.println("Fail to complete the task=>");
        }
        DefaultTableModel mdlComplete = (DefaultTableModel) tblComplete.getModel();
        mdlComplete.setRowCount(0);
        int totWaitingTime=0;
        int totTurnTime = 0;
        float avgWait,avgTurn;
        
        for (int i = 0; i < listCompleted.size(); i++) {
            ProcessObj p1 = listCompleted.get(i);
            mdlComplete.addRow(new Object[]{p1.getId(),p1.getName(),p1.getArrivalTime(),p1.getBrustTime(),p1.getCompleteTime(),p1.getWaitingTime(),p1.getTurnaroundTime()});
            totWaitingTime = totWaitingTime + p1.getWaitingTime();
            totTurnTime = totTurnTime + p1.getTurnaroundTime();
        }
        avgWait=(float)totWaitingTime/listCompleted.size();
        float avgWaitRound = (float) (Math.round(avgWait * 100.0) / 100.0);
        
        avgTurn=(float)totTurnTime/listCompleted.size();
        float avgTurnRound = (float) (Math.round(avgTurn * 100.0) / 100.0);
        
        txtAvgTurn.setText(String.valueOf(avgTurnRound));
        txtWait.setText(String.valueOf(avgWaitRound));
        txtThroughput.setText(calculateThroughput(listCompleted));
//        avgWait=(float)totWaitingTime/listCompleted.size();
//        avgTurn=(float)totTurnTime/listCompleted.size();
//        
//        txtAvgTurn.setText(String.valueOf(avgTurn));
//        txtWait.setText(String.valueOf(avgWait));
//        txtThroughput.setText(calculateThroughput(listCompleted));
       
    }//GEN-LAST:event_fCFSActionPerformed

    private void sRTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sRTActionPerformed
        List<ProcessObj> list = new ArrayList<>();
        List<ProcessObj> listCompleted = new ArrayList<>();
        DefaultTableModel mdl = (DefaultTableModel) tblAddedProcess.getModel();
        for (int i = 0; i < mdl.getRowCount(); i++) {
            int pId = (int) mdl.getValueAt(i, 0);
            String pName = (String) mdl.getValueAt(i, 1);
            int aTime = (int) mdl.getValueAt(i, 2);
            int bTime = (int) mdl.getValueAt(i, 3);
            ProcessObj p1 = new ProcessObj(pName,pId,aTime,bTime);
            ProcessObj p2 = new ProcessObj(pName,pId,aTime,bTime);
            list.add(p1);
            listCompleted.add(p2);
//            System.out.println(p1.getId()+" "+p1.getName()+" "+p1.getArrivalTime()+" "+p1.getBrustTime());
        }
//        mdl.setRowCount(0);
        ShortestRemainingTime srt = new ShortestRemainingTime();
        try {

            listCompleted = resetBurst(srt.allocateResources(list, listCompleted));
            
        } catch (Exception e) {
            System.out.println("Fail to complete the task=>");
        }
        DefaultTableModel mdlComplete = (DefaultTableModel) tblComplete.getModel();
        mdlComplete.setRowCount(0);
        int totWaitingTime=0;
        int totTurnTime = 0;
        float avgWait,avgTurn;
        
        for (int i = 0; i < listCompleted.size(); i++) {
            ProcessObj p1 = listCompleted.get(i);
            mdlComplete.addRow(new Object[]{p1.getId(),p1.getName(),p1.getArrivalTime(),p1.getBrustTime(),p1.getCompleteTime(),p1.getWaitingTime(),p1.getTurnaroundTime()});
            totWaitingTime = totWaitingTime + p1.getWaitingTime();
            totTurnTime = totTurnTime + p1.getTurnaroundTime();
        }
        avgWait=(float)totWaitingTime/listCompleted.size();
        float avgWaitRound = (float) (Math.round(avgWait * 100.0) / 100.0);
        
        avgTurn=(float)totTurnTime/listCompleted.size();
        float avgTurnRound = (float) (Math.round(avgTurn * 100.0) / 100.0);
        
        txtAvgTurn.setText(String.valueOf(avgTurnRound));
        txtWait.setText(String.valueOf(avgWaitRound));
        txtThroughput.setText(calculateThroughput(listCompleted));
        
//        avgWait=(float)totWaitingTime/listCompleted.size();
//        avgTurn=(float)totTurnTime/listCompleted.size();
//        
//        txtAvgTurn.setText(String.valueOf(avgTurn));
//        txtWait.setText(String.valueOf(avgWait));
//        txtThroughput.setText(calculateThroughput(listCompleted));
    }//GEN-LAST:event_sRTActionPerformed

    private void createProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createProcessActionPerformed
       int pId = Integer.parseInt(this.pIdTxt.getText());
       String pName = this.pNameTxt.getText();
       int aTime = Integer.parseInt(this.pATimeTxt.getText());
       int bTime = Integer.parseInt(this.pBTimeTxt.getText());
       ProcessObj p1 = new ProcessObj(pName,pId,aTime,bTime);
       
       DefaultTableModel mdl = (DefaultTableModel) tblAddedProcess.getModel();
        mdl.addRow(new Object[]{p1.getId(),p1.getName(),p1.getArrivalTime(),p1.getBrustTime()});
    }//GEN-LAST:event_createProcessActionPerformed

    private void btnClearTblActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearTblActionPerformed
        DefaultTableModel mdl = (DefaultTableModel) tblAddedProcess.getModel();
        mdl.setRowCount(0);
    }//GEN-LAST:event_btnClearTblActionPerformed

    private void tQuantumtxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tQuantumtxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tQuantumtxtActionPerformed

    private void rRoundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rRoundActionPerformed
        List<ProcessObj> list = new ArrayList<>();
        List<ProcessObj> listCompleted = new ArrayList<>();
        int timeQ = Integer.parseInt(this.tQuantumtxt.getText());
        DefaultTableModel mdl = (DefaultTableModel) tblAddedProcess.getModel();
        for (int i = 0; i < mdl.getRowCount(); i++) {
            int pId = (int) mdl.getValueAt(i, 0);
            String pName = (String) mdl.getValueAt(i, 1);
            int aTime = (int) mdl.getValueAt(i, 2);
            int bTime = (int) mdl.getValueAt(i, 3);
            ProcessObj p1 = new ProcessObj(pName,pId,aTime,bTime);
            ProcessObj p2 = new ProcessObj(pName,pId,aTime,bTime);
            list.add(p1);
            listCompleted.add(p2);
//            System.out.println(p1.getId()+" "+p1.getName()+" "+p1.getArrivalTime()+" "+p1.getBrustTime());
        }
//        mdl.setRowCount(0);
         RoundRobin r = new RoundRobin();
        try {
//            listCompleted=r.allocateResources(list, timeQ);
            listCompleted = resetBurst(r.allocateResources(list, listCompleted,timeQ));
            
        } catch (Exception e) {
            System.out.println("Fail to complete the task=>");
        }
        DefaultTableModel mdlComplete = (DefaultTableModel) tblComplete.getModel();
        mdlComplete.setRowCount(0);
        int totWaitingTime=0;
        int totTurnTime = 0;
        float avgWait,avgTurn;
        
        for (int i = 0; i < listCompleted.size(); i++) {
            ProcessObj p1 = listCompleted.get(i);
            mdlComplete.addRow(new Object[]{p1.getId(),p1.getName(),p1.getArrivalTime(),p1.getBrustTime(),p1.getCompleteTime(),p1.getWaitingTime(),p1.getTurnaroundTime()});
            totWaitingTime = totWaitingTime + p1.getWaitingTime();
            totTurnTime = totTurnTime + p1.getTurnaroundTime();
        }
        avgWait=(float)totWaitingTime/listCompleted.size();
        float avgWaitRound = (float) (Math.round(avgWait * 100.0) / 100.0);
        
        avgTurn=(float)totTurnTime/listCompleted.size();
        float avgTurnRound = (float) (Math.round(avgTurn * 100.0) / 100.0);
        
        txtAvgTurn.setText(String.valueOf(avgTurnRound));
        txtWait.setText(String.valueOf(avgWaitRound));
        txtThroughput.setText(calculateThroughput(listCompleted));
        
//        
//        avgWait=(float)totWaitingTime/listCompleted.size();
//        avgTurn=(float)totTurnTime/listCompleted.size();
//        
//        txtAvgTurn.setText(String.valueOf(avgTurn));
//        txtWait.setText(String.valueOf(avgWait));
//        txtThroughput.setText(calculateThroughput(listCompleted));
    }//GEN-LAST:event_rRoundActionPerformed

    private void txtWaitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtWaitActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtWaitActionPerformed

    private void txtAvgTurnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAvgTurnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAvgTurnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Starter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Starter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Starter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Starter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Starter().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClearTbl;
    private javax.swing.JButton createProcess;
    private javax.swing.JButton fCFS;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblAvgTTime;
    private javax.swing.JLabel lblAvgWtime;
    private javax.swing.JLabel lblthroughput;
    private javax.swing.JTextField pATimeTxt;
    private javax.swing.JTextField pBTimeTxt;
    private javax.swing.JTextField pIdTxt;
    private javax.swing.JTextField pNameTxt;
    private javax.swing.JButton rRound;
    private javax.swing.JButton sJF;
    private javax.swing.JButton sRT;
    private javax.swing.JTextField tQuantumtxt;
    private javax.swing.JTable tblAddedProcess;
    private javax.swing.JTable tblComplete;
    private javax.swing.JTextField txtAvgTurn;
    private javax.swing.JTextField txtThroughput;
    private javax.swing.JTextField txtWait;
    // End of variables declaration//GEN-END:variables

    private String calculateThroughput(List<ProcessObj> listCompleted) {
        List<Integer> completedTimes = new ArrayList<>();
        for (int i = 0; i < listCompleted.size(); i++) {
            completedTimes.add(listCompleted.get(i).getCompleteTime()); 
        }
        Collections.sort(completedTimes);
        float tPut = (float) completedTimes.size()/completedTimes.get(completedTimes.size()-1);
        float roudTput = (float) (Math.round(tPut * 100.0) / 100.0);
        return Float.toString(roudTput);
    }

    private List<ProcessObj> resetBurst(List<ProcessObj> recive) {
        DefaultTableModel mdl = (DefaultTableModel) tblAddedProcess.getModel();
        List<ProcessObj> sendList = new ArrayList<>();
        for (int i = 0; i < mdl.getRowCount(); i++) {
            String pName = (String) mdl.getValueAt(i, 1);
            int bTime = (int) mdl.getValueAt(i, 3);
            
            for (ProcessObj recive1 : recive) {
                if (pName.equals(recive1.getName())) {
                    recive1.setBrustTime(bTime);
                    recive1.setWaitingTime(recive1.getTurnaroundTime()- bTime);
                    sendList.add(recive1);
                }
                
            }
        }
        
        
        return sendList;
    }
}
